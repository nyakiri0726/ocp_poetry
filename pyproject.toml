[tool.poetry]
name = "sample"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
packages = [
    { include = "src" },
]

[tool.poetry.dependencies]
python = "^3.9"
pandas = "^1.5.1"
isort = "^5.10.1"
black = "^22.10.0"
pyproject-flake8 = "^5.0.4.post1"
pytest = "^7.2.0"
jupyterlab = "^3.5.0"
numpy = "^1.23.5"
mypy = "^0.991"
torch={path="torch-1.13.1+cu116-cp39-cp39-linux_x86_64.whl"}
pyg_lib={path="pyg_lib-0.1.0+pt113cu116-cp39-cp39-linux_x86_64.whl"}
torch_cluster={path="torch_cluster-1.6.0+pt113cu116-cp39-cp39-linux_x86_64.whl"}
torch_sparse={path="torch_sparse-0.6.15+pt113cu116-cp39-cp39-linux_x86_64.whl"}
torch_scatter={path="torch_scatter-2.1.0+pt113cu116-cp39-cp39-linux_x86_64.whl"}
torch-geometric = "^2.2.0"
pre-commit = "^3.0.4"
pyyaml = "^6.0"
lmdb = "^1.4.0"
matplotlib = "^3.6.3"
wandb = "^0.13.9"
ase = "3.21.1"
tensorboard = "^2.11.2"
numba = "^0.56.4"
pymatgen = "2020.12.31"
tqdm = "^4.64.1"
submitit = "^1.4.5"
syrupy = "^4.0.0"
fastapi = "^0.89.1"
uvicorn = "^0.20.0"






[tool.isort]
profile = "black"
line_length = 120
# 各ライブラリ群の説明を追記する
import_heading_stdlib      = "Standard Library"
import_heading_thirdparty  = "Third Party Library"
import_heading_firstparty  = "First Party Library"
import_heading_localfolder = "Local Library"
# from third_party import lib1, lib2...のような記述時の改行方法の設定(https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html)
multi_line_output = 3
# 最後の要素の末尾に","を付けるようにする設定
include_trailing_comma = true

[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]

[tool.pytest.ini_options]
testpaths = ["tests",]

[tool.mypy]
# エラー時のメッセージを詳細表示
show_error_context = true
# エラー発生箇所の行数/列数を表示
show_column_numbers = true
# import 先のチェックを行わない (デフォルトだとサードパーティーライブラリまでチェックする)
ignore_missing_imports = true
# 関数定義の引数/戻り値に型アノテーション必須
disallow_untyped_defs = true
# デフォルト引数に None を取る場合型アノテーションに Optional 必須
no_implicit_optional = true
# 戻り値が Any 型ではない関数の戻り値の型アノテーションが Any のとき警告
warn_return_any = true
# mypy エラーに該当しない箇所に `# type: ignore` コメントが付与されていたら警告
# ※ `# type: ignore` が付与されている箇所は mypy のエラーを無視出来る
warn_unused_ignores = true
# 冗長なキャストに警告
warn_redundant_casts = true